INDICI <- INDICI [c(1:3, 6, 4, 5)]
LEGENDA <- data.frame( var = colnames(ALL), desc = c("media camp. 1", "sd camp. 1","media camp. 2", "sd camp. 2", "overlapping tipo 1", "overlapping tipo 2", "sample size","differenza tra le xi","skewness","varianza","vera sovrapposizione","t test","welch test","wilcoxon test", "var test", "overlapping perm","mean perm", "var perm", "shapiro camp. 1", "shapiro camp. 2","kolmogorov","media secondo campione","ds secondo campione") )
MUSI <- with( PARlist, expand.grid(mu=mu_vec, sigma=sigma_vec, alpha = alpha_vec) )
DESIGN <- NULL
for (i in 1:nrow(MUSI)) {
DESIGN <- rbind( DESIGN, unlist( with( MUSI, sninvpar(mu[i],sigma[i],alpha = alpha[i]) )) )
}
DESIGN <- data.frame(DESIGN)
DD <- with( DESIGN, expand.grid( xi = unique(xi), omega = unique(omega),
alpha = unique(alpha), n = PARlist$n_vec ) )
DESIGN <- apply(DD, 1, as.list)
DD <- do.call(rbind,lapply(DESIGN, function(x){
unlist(x)
}))
DD <- data.frame( unique( DD[,c("xi","omega","alpha")] ) )
DD$mu <- factor(with(DD, snpar(xi,omega,alpha)$mu))
DD$sigma <- factor(with(DD, snpar(xi,omega,alpha)$sigma))
DD <- subset( DD, (mu %in% PARlist$mu_vec)  & (alpha %in% PARlist$alpha_vec ) & (sigma %in% PARlist$sigma_vec))
INDICI <- colnames(ALL)[grep("pval",colnames(ALL))]
INDICI <- INDICI[!(grepl("_norm",INDICI)|grepl("F_",INDICI)|grepl("mean_",INDICI))]
INDICI <- INDICI [c(1:3, 6, 4, 5)]
LEGENDA <- data.frame( var = colnames(ALL), desc = c("media camp. 1", "sd camp. 1","media camp. 2", "sd camp. 2", "overlapping tipo 1", "overlapping tipo 2", "sample size","differenza tra le xi","skewness","varianza","vera sovrapposizione","t test","welch test","wilcoxon test", "var test", "overlapping perm","mean perm", "var perm", "shapiro camp. 1", "shapiro camp. 2","kolmogorov","media secondo campione","ds secondo campione") )
MUSI <- with( PARlist, expand.grid(mu=mu_vec, sigma=sigma_vec, alpha = alpha_vec) )
DESIGN <- NULL
for (i in 1:nrow(MUSI)) {
DESIGN <- rbind( DESIGN, unlist( with( MUSI, sninvpar(mu[i],sigma[i],alpha = alpha[i]) )) )
}
DESIGN <- data.frame(DESIGN)
DD <- with( DESIGN, expand.grid( xi = unique(xi), omega = unique(omega),
alpha = unique(alpha), n = PARlist$n_vec ) )
DESIGN <- apply(DD, 1, as.list)
DD <- do.call(rbind,lapply(DESIGN, function(x){
unlist(x)
}))
DD <- data.frame( unique( DD[,c("xi","omega","alpha")] ) )
DD$mu <- factor(with(DD, snpar(xi,omega,alpha)$mu))
DD$sigma <- factor(with(DD, snpar(xi,omega,alpha)$sigma))
DD <- subset( DD, (mu %in% PARlist$mu_vec)  & (alpha %in% PARlist$alpha_vec ) & (sigma %in% PARlist$sigma_vec))
library(brms)
x <- seq(-5,5, by=.01)
gData <- data.frame(x=x)
gData$z <- dskew_normal(x,xi=0,omega=1)
for (i in 1:nrow(DD)) {
k <- with(DD, paste0("mu_",mu[i],"_sigma_",sigma[i],"_alpha_",alpha[i]))
y <- dsn( gData$x, xi = DD$xi[i], omega = DD$omega[i], alpha = DD$alpha[i] )
gData <- cbind(gData,y)
colnames(gData)[ncol(gData)] <- k
}
Y <- stack( gData[,grep("mu",colnames(gData))] )
Y$x <- gData$x
Y$z <- gData$z
ll <- strsplit(as.character(Y$ind),split="_")
Y$mu <- factor( unlist( lapply(ll, function(x){x[2]}) ))
Y$sigma <- factor( unlist( lapply(ll, function(x){x[4]}) ))
Y$alpha <- factor( unlist( lapply(ll, function(x){x[6]}) ), levels = c(0,2,10))
TEXT <- unique(Y[,c("mu","sigma","alpha")])
TEXT$label <- paste0("[",1:36,"]")
TEXT$x <- -4.5
TEXT$y <- .4
theme_set(theme_bw())
ggplot(Y,aes(x,z)) + facet_grid(alpha+sigma~mu) + geom_line() + geom_line(aes(x,values,color="red")) + geom_text( aes(x,y,label=label), data = TEXT) + guides(color="none") + xlab("") + ylab("")
SAMPLE_prop <- .005
ALL0 <- subset(ALL,alpha == 0 )
righe <- sample(1:nrow(ALL0),nrow(ALL0)*SAMPLE_prop)
ALL2 <- subset(ALL,alpha == 2)
ALL10 <- subset(ALL,alpha == 10)
RR <- cor(ALL[,INDICI])
colnames(RR) <- rownames(RR) <- gsub("ks_test","ks",gsub("vartest","$F$",gsub("wilcox","wilcoxon",gsub("zeta_perm","$\\\\zeta\\_{\\\\mbox{ov}}$",gsub("_pval","",rownames(RR))))))
colnames(RR)[1] <- rownames(RR)[1] <- gsub("t","$t$", colnames(RR)[1])
plot_correlation(RR,textsize = 13, angle = 20, values = TRUE, corrsize = 3.5, U = c(-2,0,-3,-.5),legendsize = 11)
# Chunk 1
library(knitr)
options(digits=3)
opts_chunk$set(fig.width=3, fig.height=3, dev="tikz",fig.align='center',echo=FALSE,results="hide",comment=NA,prompt=FALSE,warning=FALSE, cache = TRUE)
# Chunk 2
rm(list=ls())
main <- "/Users/ambraperugini/Library/CloudStorage/OneDrive-UniversitàdegliStudidiPadova/Lavoro/Overlapping/"
# main <- "~/lavori/overpermutation/"
# if (!grepl("bayes",Sys.info()["user"])) main <- gsub("~","~/MEGAsync",main)
datadir <- paste0(main,"data/")
# KUtils::pulizia(paste(main,"knitr/",sep=""), c(".Rnw",".bib","pdf"),TRUE)
# Chunk 3
# ++++++++++++++++++++++++++++++++++
betapar <- function(mx,sx,n=NULL) {
vx <- sx^2
if (vx<(mx*(1-mx))) {
pezzo <- ((mx*(1-mx))/vx)-1
a <- mx*pezzo
b <- (1-mx)*pezzo
} else {
warning("adjusted formula by using n")
a <- mx*n
b <- (1-mx)*n
}
return(list(a=a,b=b))
}
# +++++++++++++++++++++++++++
snpar <- function(xi=0,omega=1,alpha=0) {
delta <- alpha/sqrt(1+alpha^2)
mu <- xi + omega * delta * sqrt( 2/pi )
sigma2 <- omega^2 * ( 1 - (2*delta^2)/pi )
return(list(mu = mu, sigma = sqrt(sigma2)))
}
# +++++++++++++++++++++++++++
sninvpar <- function( mu=0, sigma=1, xi=NULL, omega=NULL, alpha=0 ) {
if (is.null(omega)) {
delta <- alpha/sqrt(1+alpha^2)
omega2 <- sigma^2 / ( 1 - (2*delta^2) / pi )
omega <- sqrt( omega2 )
}
if (is.null(xi)) {
delta <- alpha/sqrt(1+alpha^2)
xi <- mu - omega * delta * sqrt( 2/pi )
}
return( list( xi = xi, omega = omega, alpha = alpha ) )
}
# +++++++++ funzione colori default
gg_color_hue <- function(n) {
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 100)[1:n]
}
# +++++++++++++++++++++++++++++++
#' @name min_normal_uniform
#' @description Calcola il minimo tra la densità di una normale e di una uniforme
#' @param x = x vector
#' @param normPars = parametri della normale: media e dev. standard
#' @param unifPars = parametri della uniforme: minimo e massimo
#' #' @param return.all = logical, if \code{TRUE} restituisce il data set completo delle densità delle due distribuzioni
min_normal_uniform <- function( x = NULL, normPars = c(0,1), unifPars = c(0,1), return.all = FALSE ) {
if (is.null(x)) x <- seq(-5,5,by=.1)
y1 <- dnorm(x, normPars[1], normPars[2])
y2 <- dunif(x, unifPars[1], unifPars[2])
dy <- ifelse(y1<y2, y1, y2)
gData <- data.frame( x, y1, y2, dy )
if (return.all) {
return( list( gData = gData ) )
} else {
return( dy )
}
}
# +++++++++++++++++++++++++++++++++++
#' @name min_dskew_normal
#' @description Calcola il minimo tra due densità Skew-Normal
#' @param x = x vector
#' @param xi = vector of location parameters
#' @param omega = vector of scale parameters
#' @param alpha = vector of skewness parameters
#' @param plot = logical, if \code{TRUE} produce la rappresentazione grafica delle densità
#' e dell'area di sovrapposizione
#' @param return.all = logical, if \code{TRUE} restituisce il data set completo delle
#' densità delle due distribuzioni
min_dskew_normal <- function( x = seq( -5, 5, by = .01 ), xi = c(0,0), omega = c(1,1), alpha = c(0,0),
return.all = FALSE ) {
if (length(xi)==1) xi <- rep(xi,2)
if (length(omega)==1) omega <- rep(omega,2)
if (length(alpha)==1) alpha <- rep(alpha,2)
require( sn )
y1 <- dsn( x, xi = xi[1], omega = omega[1], alpha = alpha[1] )
y2 <- dsn( x, alpha = alpha[2], xi = xi[2], omega = omega[2] )
dy <- ifelse( y1 < y2, y1, y2 )
gData <- data.frame( x, y1, y2, dy )
if (return.all) {
return( list( gData = gData ) )
} else {
return( dy )
}
}
# ++++++++++++++++++++++++++++
#' @name permTest
#' @description Esegue test di permutazione su overlapping,
#'differenza tra medie e rapporto tra varianze
#' @param xList = lista di due elementi (\code{x1} e \code{x2} )
#' @param B = numero di permutazioni da effettuare
#' @param ov.type = character, type of index. If type = "2" returns the proportion of the overlapped area between two or more densities.
#' @note Il confronto tra le medie è ad una sola coda e
#'testa l'ipotesi che le medie siano uguali vs l'ipotesi
#'che la seconda sia maggiore della prima (\code{mean(x2) > mean(x1)})
#' @return Restituisce una lista con tre elementi:
#' obs = vettore dei valori osservati di non-sovrapposizione
#'       \coed{1-eta}, differenza tra le medie (\code{mean(x2)-mean(x1)}),
#'       rapporto tra le varianze
#' perm = matrice Bx3 con i valori delle stesse statistiche ottenute
#'        via permutazione
#' pval = vettore con i tre p-values
permTest <- function( xList, B = 1000, ov.type = c("1","2")) {
require(overlapping)
ov.type <- match.arg(ov.type)
names(xList) <- c("x1","x2")
N <- unlist( lapply(xList,length) )
# observed statistics
zobs <- 1-overlap( xList, type = ov.type )$OV
dobs <- diff( unlist( lapply(xList, mean) ) )
Fobs <-  with( xList, var.test(x1,x2)$statistic )
OBS <- data.frame(zobs,dobs,Fobs)
Mobs <- matrix( OBS, nrow=B, ncol=3, byrow = TRUE )
Yperm <- t( sapply(1:B, function(b){
xperm <- sample( unlist( xList ) )
xListperm <- list( x1 = xperm[1:N[1]], x2 = xperm[(N[1]+1):(sum(N))] )
zperm <- 1 - overlap( xListperm, type = ov.type )$OV
dperm <- diff( unlist( lapply(xListperm, mean) ) )
Fperm <-  with( xListperm, var.test(x1,x2)$statistic )
out <- c(zperm,dperm,Fperm)
names(out) <- c("zperm","dperm","Fperm")
out
}) )
PVAL <- (apply( Yperm >= Mobs, 2, sum )+1)/(nrow(Yperm)+1)
L <- list(obs=OBS,perm=Yperm,pval=PVAL)
return(L)
}
# ++++++++++++++++++++++++++
#' @name numeriAPA
#' @description Toglie lo zero dagli indici inclusi nell'intervallo [0,1], secondo norme APA
numeriAPA <- function(x) {
gsub("0\\.","\\.",as.character(x))
}
## +++++++++++++++++++++++++++++++++++++++++++
#' @title Grafico correlazioni
#' @param RR = correlation matrix
#' @param U = vettore con i margini del grafico
plot_correlation <- function(RR,values=FALSE,textsize=12,legendsize=10,angle=0, corrsize=4, U=c(0,0,0,0), short.names = FALSE) {
require(ggplot2)
require(reshape2)
RR <- melt(RR)
NAME <- "Correlation"
if (short.names) {
levels(RR$Var2) <- paste0("(",1:length(levels(RR$Var2)),")")
}
GGcor <- ggplot(RR,aes(Var2,Var1,fill=value))+geom_tile()+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",midpoint =0, space = "Lab",name=NAME)+
xlab("")+ylab("")+coord_fixed()+
theme(plot.margin = unit(U, "cm"),
text=element_text(size=textsize),
axis.text.x=element_text(angle=angle),
legend.text = element_text(size = legendsize),legend.title = element_text(size = legendsize))
if (values) {
GGcor <- GGcor + geom_text(aes(Var2, Var1, label = round(value,2)), color = "black", size = corrsize )
}
print(GGcor)
}
# ++++++++++++++++++++++++++++
#' @name perm.test
#' @description Esegue test di permutazione su overlapping,
#'differenza tra medie e rapporto tra varianze
#' @param x = lista di due elementi (\code{x1} e \code{x2} )
#' @param B = numero di permutazioni da effettuare
#' @return Restituisce una lista con tre elementi:
#' obs = valore osservato di non-sovrapposizione
#'       \coed{1-eta}
#' perm = valori della stessa statistica ottenute
#'        via permutazione
#' pval = p-value
perm.test <- function (x, B = 1000,
return.distribution = FALSE, ...)
{
# control
args <- c(as.list(environment()), list(...))
pairsOverlap <- ifelse(length(x)==2, FALSE, TRUE)
N <- unlist( lapply(x,length) )
out <- overlap(x, ...)
if (pairsOverlap) {
zobs <- 1-out$OVPairs
Zperm <- t(sapply(1:B, function(b) {
xListperm <- perm.pairs( x )
ovperm <- unlist( lapply(xListperm, overlap, ...) )
zperm <- 1 - ovperm
}))
} else {
zobs <- 1-out$OV
Zperm <- t(sapply(1:B, function(b) {
xperm <- sample( unlist( x ) )
xListperm <- list( x1 = xperm[1:N[1]], x2 = xperm[(N[1]+1):(sum(N))] )
zperm <- 1 - overlap( xListperm, ... )$OV
}))
}
## (sum( zperm >= obsz ) +1) / (length( zperm )+1) LIVIO
colnames(Zperm) <- gsub("\\.OV","",colnames(Zperm))
if (nrow(Zperm) > 1) {
ZOBS <- matrix( zobs, nrow(Zperm), ncol(Zperm), byrow = TRUE )
pval <- (apply( Zperm > ZOBS, 2, sum ) + 1)/ (nrow(Zperm)+1)
} else {
pval <- (sum(Zperm > zobs)+1) / (length(Zperm)+1)
}
if (return.distribution) {
return(list(Zobs = zobs, pval = pval, Zperm = Zperm))
} else {
return(list(Zobs = zobs, pval = pval))
}
}
# Chunk 4
library(overlapping)
normPars <- c(10,2)
unifPars <- c(0,20)
n <- 30
set.seed(36)
x <- rnorm(n, normPars[1], normPars[2])
y <- runif(n, unifPars[1], unifPars[2])
LIST<-list(x,y)
OV <- overlap(LIST)
TTEST <- t.test(x,y, var.equal = TRUE)
TTESTUNEQUAL <- t.test(x,y, var.equal = FALSE)
Y <- stack( data.frame(y1=x,y2=y) )
# Chunk 5
myData <- data.frame( x = seq(0,20,by=.1) )
myData$y1 <- dnorm(myData$x, normPars[1], normPars[2] )
myData$y2 <- dunif(myData$x, unifPars[1], unifPars[2])
myData$h <- with(myData, ifelse( y1 < y2, y1, y2 ))
AREA <- integrate( min_normal_uniform, -Inf, Inf, normPars = normPars, unifPars = unifPars )
# Chunk 6: equalmeans
library(cowplot)
theme_set(theme_bw())
plot_grid(
ggplot(myData,aes(x,y1)) + geom_line() + geom_line(aes(x,y2)) +
geom_ribbon(aes(ymin=0,ymax=h), alpha = .5) + xlab("") + ylab("") +
scale_y_continuous( breaks = NULL ) + ggtitle("[A]"),
ggplot(Y, aes(values,fill=ind,color=ind)) + geom_density(alpha = .5) + xlab("") + theme(legend.title = element_blank()) + ylab("") +
scale_y_continuous( breaks = NULL ) + guides(fill="none",color="none")+ ggtitle("[B]"),
ncol = 1
)
# Chunk 7
DATA<-read.csv(paste0(datadir,"EngTurk.csv"))
# parole alta e bassa freq Inglese
table(DATA$item[DATA$ItemType == "High_freq" & DATA$Language == "English"])
table(DATA$item[DATA$ItemType == "Low_freq" & DATA$Language == "English"])
# blue eyes
# foreign business
low_frequency <-DATA$ReactionTime[DATA$item == "blue eyes"]
high_frequency <- DATA$ReactionTime[DATA$item == "foreign business"]
# Chunk 8
library(datawizard)
xList <- list( x1 = low_frequency, x2 = high_frequency )
length(unlist(xList))
obsz <- 1 - overlap( xList )$OV
MX <- lapply(xList, mean)
SDX <- lapply(xList, var)
SKX <- lapply(xList, skewness)
# Chunk 9: permtest2
B <- 2e3
n <- length(xList[[1]])
zperm <- sapply( 1:B, function(x){
xperm <- sample( unlist( xList ) )
xListperm <- list( x1 = xperm[1:n], x2 = xperm[(n+1):(n*2 )] )
1 - overlap( xListperm )$OV
})
#plot( density(zperm) )
#abline( v = obsz, lty = 2 )
# Chunk 10: ex2
Y <- stack(data.frame(xList))
ZPERM <- data.frame(zperm)
theme_set(theme_bw())
cowplot::plot_grid(
ggplot( Y, aes(values,fill=ind,color=ind) )+geom_density(alpha = .5) + theme(legend.title = element_blank()) +xlab("") +ylab("")+guides(fill="none",color="none")+ggtitle("[A]"),
ggplot(ZPERM,aes(zperm))+geom_vline(xintercept = obsz,lty=2) +geom_density()+ggtitle("[B]")  +xlab("") +ylab(""),
ncol=1
)
# Chunk 11
PVAL <- (sum( zperm > obsz )+1) / (length( zperm )+1)
TTEST <- with( xList, t.test( x1, x2, var.equal = TRUE ) )
# Chunk 12
set.seed(1)
n2 <- 50
y1 <- rnorm( n2, 3, 2 )
y2 <- rchisq( n2, 3 )
yList <- list( y1 = y1, y2 = y2 )
PERMTEST <- perm.test( yList )
TEX <- t.test( y1, y2, var.equal = TRUE )
TEXw <- t.test( y1, y2 )
MX2 <- c(mean(y1),mean(y2))
VX2 <- c(var(y1),var(y2))
OV2 <- overlap(yList)$OV
# Chunk 13
cat("set.seed(1)","\n")
cat(paste0("n <- ",n2),"\n")
cat(paste0("y1 <- rnorm( ",n2,", 3, 2 )"),"\n")
cat(paste0("y2 <- rchisq( ",n2,", 3 )"),"\n")
# Chunk 14
cat("library( overlapping )","\n")
cat("yList <- list( y1 = y1, y2 = y2 )","\n")
cat("perm.test( yList )","\n")
cat("","\n")
PERMTEST
# Chunk 15: example
yData <- stack( data.frame(yList) )
ggplot(yData, aes(values, fill = ind, color = ind)) + theme_bw() + geom_density(alpha = .4) + theme( legend.title = element_blank()) + xlab("") + ylab("")
# Chunk 16: scenari
library(sn)
PARlist <- list(
xi_vec = c(0,.5,1),
omega_vec = c(1,2,3),
alpha_vec = c(0,1,2)
)
x <- seq(-5,5,by=.1)
gData <- NULL
for (j in 1:3) {
# xi
y <- with( PARlist, dsn(x,xi_vec[j],omega_vec[1],alpha_vec[1]) )
xi <- PARlist$xi_vec[j]
omega <- PARlist$omega_vec[1]
alpha <- PARlist$alpha_vec[1]
scenario <- "xi"
dd <- data.frame(x,y,xi,omega,alpha,scenario)
gData <- rbind(gData,dd)
# omega
y <- with( PARlist, dsn(x,xi_vec[1],omega_vec[j],alpha_vec[1]) )
xi <- PARlist$xi_vec[1]
omega <- PARlist$omega_vec[j]
alpha <- PARlist$alpha_vec[1]
scenario <- "omega"
dd <- data.frame(x,y,xi,omega,alpha,scenario)
gData <- rbind(gData,dd)
# alpha
y <- with( PARlist, dsn(x,xi_vec[1],omega_vec[1],alpha_vec[j]) )
xi <- PARlist$xi_vec[1]
omega <- PARlist$omega_vec[1]
alpha <- PARlist$alpha_vec[j]
scenario <- "alpha"
dd <- data.frame(x,y,xi,omega,alpha,scenario)
gData <- rbind(gData,dd)
}
gData$xi <- factor(gData$xi)
gData$omega <- factor(gData$omega)
gData$alpha <- factor(gData$alpha)
UNIT <- .5
theme_set(theme_bw())
cowplot::plot_grid(
ggplot(subset(gData,scenario=="xi"),aes(x,y,color=xi))+geom_line()+xlab("")+ylab("")+ggtitle("[A]")+labs(color="$\\xi$") + theme(legend.position = "bottom", legend.key.size = unit(UNIT,"cm")),
ggplot(subset(gData,scenario=="omega"),aes(x,y,color=omega))+geom_line()+xlab("")+ylab("")+ggtitle("[B]")+theme(legend.position = "bottom", legend.key.size = unit(UNIT,"cm"))+labs(color="$\\omega$"),
ggplot(subset(gData,scenario=="alpha"),aes(x,y,color=alpha))+geom_line()+xlab("")+ylab("")+ggtitle("[C]")+theme(legend.position = "bottom", legend.key.size = unit(UNIT,"cm"))+labs(color="$\\alpha$"), nrow = 1
)
# Chunk 17
load(paste0(datadir,"R02_sim07.rda"))
NTAB <- table(ALL$n,ALL$mu,ALL$sigma,ALL$alpha)
# Chunk 18
INDICI <- colnames(ALL)[grep("pval",colnames(ALL))]
INDICI <- INDICI[!(grepl("_norm",INDICI)|grepl("F_",INDICI)|grepl("mean_",INDICI))]
INDICI <- INDICI [c(1:3, 6, 4, 5)]
LEGENDA <- data.frame( var = colnames(ALL), desc = c("media camp. 1", "sd camp. 1","media camp. 2", "sd camp. 2", "overlapping tipo 1", "overlapping tipo 2", "sample size","differenza tra le xi","skewness","varianza","vera sovrapposizione","t test","welch test","wilcoxon test", "var test", "overlapping perm","mean perm", "var perm", "shapiro camp. 1", "shapiro camp. 2","kolmogorov","media secondo campione","ds secondo campione") )
MUSI <- with( PARlist, expand.grid(mu=mu_vec, sigma=sigma_vec, alpha = alpha_vec) )
DESIGN <- NULL
for (i in 1:nrow(MUSI)) {
DESIGN <- rbind( DESIGN, unlist( with( MUSI, sninvpar(mu[i],sigma[i],alpha = alpha[i]) )) )
}
DESIGN <- data.frame(DESIGN)
DD <- with( DESIGN, expand.grid( xi = unique(xi), omega = unique(omega),
alpha = unique(alpha), n = PARlist$n_vec ) )
DESIGN <- apply(DD, 1, as.list)
DD <- do.call(rbind,lapply(DESIGN, function(x){
unlist(x)
}))
DD <- data.frame( unique( DD[,c("xi","omega","alpha")] ) )
DD$mu <- factor(with(DD, snpar(xi,omega,alpha)$mu))
DD$sigma <- factor(with(DD, snpar(xi,omega,alpha)$sigma))
DD <- subset( DD, (mu %in% PARlist$mu_vec)  & (alpha %in% PARlist$alpha_vec ) & (sigma %in% PARlist$sigma_vec))
# Chunk 19
library(brms)
x <- seq(-5,5, by=.01)
gData <- data.frame(x=x)
gData$z <- dskew_normal(x,xi=0,omega=1)
for (i in 1:nrow(DD)) {
k <- with(DD, paste0("mu_",mu[i],"_sigma_",sigma[i],"_alpha_",alpha[i]))
y <- dsn( gData$x, xi = DD$xi[i], omega = DD$omega[i], alpha = DD$alpha[i] )
gData <- cbind(gData,y)
colnames(gData)[ncol(gData)] <- k
}
Y <- stack( gData[,grep("mu",colnames(gData))] )
Y$x <- gData$x
Y$z <- gData$z
ll <- strsplit(as.character(Y$ind),split="_")
Y$mu <- factor( unlist( lapply(ll, function(x){x[2]}) ))
Y$sigma <- factor( unlist( lapply(ll, function(x){x[4]}) ))
Y$alpha <- factor( unlist( lapply(ll, function(x){x[6]}) ), levels = c(0,2,10))
TEXT <- unique(Y[,c("mu","sigma","alpha")])
TEXT$label <- paste0("[",1:36,"]")
TEXT$x <- -4.5
TEXT$y <- .4
# Chunk 20: alpha0
theme_set(theme_bw())
ggplot(Y,aes(x,z)) + facet_grid(alpha+sigma~mu) + geom_line() + geom_line(aes(x,values,color="red")) + geom_text( aes(x,y,label=label), data = TEXT) + guides(color="none") + xlab("") + ylab("") + scale_y_continuous(breaks = NULL)
# Chunk 21
SAMPLE_prop <- .005
ALL0 <- subset(ALL,alpha == 0 )
righe <- sample(1:nrow(ALL0),nrow(ALL0)*SAMPLE_prop)
ALL2 <- subset(ALL,alpha == 2)
ALL10 <- subset(ALL,alpha == 10)
RR <- cor(ALL[,INDICI])
RR
RR[1,2]
str(RR[1,2])
round(RR[1,2],5)
round(RR[1,2],10)
?cor
options()
options(digits = 10)
RR <- cor(ALL[,INDICI])
RR
options(digits = 10)
RR <- cor(ALL[,INDICI])
colnames(RR) <- rownames(RR) <- gsub("welch","w",gsub("ks_test","ks",gsub("vartest","$F$",gsub("wilcox","wmw",gsub("zeta_perm","$\\\\zeta\\_{\\\\mbox{ov}}$",gsub("_pval","",rownames(RR)))))))
colnames(RR)[1] <- rownames(RR)[1] <- gsub("t","$t$", colnames(RR)[1])
plot_correlation(RR,textsize = 13, angle = 0, values = TRUE, corrsize = 3.5, U = c(-2,0,-3,-.5),legendsize = 11)
RR
plot_correlation(round(RR, 2),textsize = 13, angle = 0, values = TRUE, corrsize = 3.5, U = c(-2,0,-3,-.5),legendsize = 11)
trunc(RR,2)
trunc(RR,5)
?trunc
signif(RR, digits = 6)
signif(RR, digits = 2)
signif(RR, digits = 3)
floor(RR)
RR[1,2] <- .99
plot_correlation(RR,textsize = 13, angle = 0, values = TRUE, corrsize = 3.5, U = c(-2,0,-3,-.5),legendsize = 11)
RR[1,2] <- RR[2,1] <- .99
plot_correlation(RR,textsize = 13, angle = 0, values = TRUE, corrsize = 3.5, U = c(-2,0,-3,-.5),legendsize = 11)
